// js/attractions.js

(function () {
  'use strict';

  // --- DOM Elements ---
  const attractionsContainer = document.getElementById('attractions-container');
  const searchInput = document.getElementById('search-input');
  const categoryButtons = document.querySelectorAll('.tag-btn');
  const cartBtn = document.getElementById('cart-btn');
  const cartModal = document.getElementById('cart-modal');
  const cartItems = document.getElementById('cart-items');
  const phoneInput = document.getElementById('phone');
  const commentInput = document.getElementById('comment-input');
  const sendOrderBtn = document.getElementById('send-order');
  const successMessage = document.getElementById('success-message');
  const yearSpan = document.getElementById('year');

  // --- State ---
  let currentCategory = '–≤—Å–µ';
  let ATTRACTIONS = []; // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏
  let renderProductsTimeout;

  // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
  document.addEventListener('DOMContentLoaded', async function () {
    console.log('Attractions page loaded');
    await loadAttractions(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    renderAttractions(); // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
    setupEventListeners(); // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    updateCartCount(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–¥–∞
    if (yearSpan) {
      yearSpan.textContent = new Date().getFullYear();
    }
  });

  // --- Data Loading ---
  async function loadAttractions() {
    // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    try {
      console.log('–ó–∞–ø—Ä–æ—Å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      const response = await fetch('/api/attractions');

      if (!response.ok) {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 2xx, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`HTTP error! status: ${response.status}. ${errorData.error || ''} Details: ${errorData.details || ''}`);
      }

      const data = await response.json();
      
      ATTRACTIONS = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!ATTRACTIONS || ATTRACTIONS.length === 0) {
        console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤.');
        if (attractionsContainer) {
          attractionsContainer.innerHTML = `
            <div class="empty">
              <div class="text-6xl">ü™Ñ</div>
              <h3>–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p>–ö–∞—Ç–∞–ª–æ–≥ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!</p>
              <small class="text-muted">–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</small>
            </div>
          `;
        }
        return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
      }

    } catch (error) {
      // –õ—é–±–∞—è –æ—à–∏–±–∫–∞ (—Å–µ—Ç–µ–≤–∞—è, JSON.parse, HTTP status code –∏ —Ç.–¥.)
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤:', error);
      if (attractionsContainer) {
        attractionsContainer.innerHTML = `
          <div class="empty error">
            <div class="text-6xl">‚ùó</div>
            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤.</p>
            <p class="error-details">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12).</p>
            <small class="text-muted">–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞.</small>
            <button onclick="location.reload()" class="btn-details" style="margin-top: 1rem;">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
          </div>
        `;
      }
    }
  }

  

  // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π ---
  function createAttractionCard(attraction) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    const specs = attraction.specs || {};
    const places = specs.places || 'N/A';
    const power = specs.power || 'N/A';
    const games = specs.games || 'N/A';
    const area = specs.area || 'N/A';
    const dimensions = specs.dimensions || 'N/A';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ images, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç, –∏–Ω–∞—á–µ fallback –Ω–∞ –ø–æ–ª–µ image
    let imagesArray = [];
    if (attraction.images && Array.isArray(attraction.images) && attraction.images.length > 0) {
        imagesArray = attraction.images;
    } else if (attraction.image) {
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        imagesArray = [{ url: attraction.image, alt: attraction.title || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' }];
    } else {
        // –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç —Å–æ–≤—Å–µ–º
        imagesArray = [{ url: '/assets/icons/placeholder1.webp', alt: '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' }];
    }

    const card = document.createElement('div');
    card.className = 'attraction-card';
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const galleryId = `gallery-${attraction.id}`;
    const mainImageId = `main-image-${attraction.id}`;
    const thumbnailsId = `thumbnails-${attraction.id}`;

    card.innerHTML = `
      <div class="attraction-gallery" id="${galleryId}" data-attraction-id="${attraction.id}">
        <div class="attraction-main-image-container">
            <img id="${mainImageId}" class="attraction-main-image" src="${imagesArray[0].url}" onerror="this.onerror=null; this.src='/assets/icons/placeholder1.webp';" alt="${imagesArray[0].alt || attraction.title}" />
            ${imagesArray.length > 1 ? `
            <button class="attraction-gallery-nav prev" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">&#10094;</button>
            <button class="attraction-gallery-nav next" aria-label="–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">&#10095;</button>
            ` : ''}
        </div>
        ${imagesArray.length > 1 ? `
        <div class="attraction-thumbnails" id="${thumbnailsId}">
            ${imagesArray.map((img, index) => `
                <img class="attraction-thumbnail ${index === 0 ? 'active' : ''}" 
                     src="${img.url}" 
                     alt="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ${index + 1} –¥–ª—è ${attraction.title}" 
                     data-index="${index}"
                     onerror="this.onerror=null; this.src='/assets/icons/placeholder1.webp';"/>
            `).join('')}
        </div>
        ` : ''}
      </div>
      <div class="attraction-info">
        <h3 class="attraction-title">${attraction.title}</h3>
        <div class="attraction-price">${window.formatPrice ? window.formatPrice(attraction.price) : `${attraction.price}‚ÇΩ`}</div>
    
        <div class="attraction-specs">
          <div class="spec-item">
            <span class="spec-label">–ú–µ—Å—Ç:</span> <span class="spec-value">${places}</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">–ú–æ—â–Ω–æ—Å—Ç—å:</span> <span class="spec-value">${power}</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">–ò–≥—Ä—ã:</span> <span class="spec-value">${games}</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">–ü–ª–æ—â–∞–¥—å:</span> <span class="spec-value">${area}</span>
          </div>
          <div class="spec-item">
            <span class="spec-label">–†–∞–∑–º–µ—Ä—ã:</span> <span class="spec-value">${dimensions}</span>
          </div>
        </div>
        <div class="attraction-description">${attraction.description ? (attraction.description) : ''}</div>
        <!-- –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑ -->
        <div class="product-actions">
          <button class="btn-cart" data-id="${attraction.id}">–í –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
      </div>
    `;
    return card;
  }

  // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ ---
  function setupGallery(cardElement, imagesArray) {
    if (imagesArray.length <= 1) return; // –ù–µ—á–µ–≥–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å

    const mainImage = cardElement.querySelector('.attraction-main-image');
    const prevBtn = cardElement.querySelector('.attraction-gallery-nav.prev');
    const nextBtn = cardElement.querySelector('.attraction-gallery-nav.next');
    const thumbnailsContainer = cardElement.querySelector('.attraction-thumbnails');
    let currentIndex = 0;

    const updateGallery = (newIndex) => {
        if (newIndex < 0 || newIndex >= imagesArray.length) return;
        currentIndex = newIndex;
        const newImage = imagesArray[currentIndex];
        if (mainImage) {
            mainImage.src = newImage.url;
            mainImage.alt = newImage.alt || '';
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mainImage.onerror = () => { mainImage.src = '/assets/icons/placeholder1.webp'; };
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É
        cardElement.querySelectorAll('.attraction-thumbnail').forEach((thumb, i) => {
            thumb.classList.toggle('active', i === currentIndex);
        });
    };

    if (prevBtn) {
        prevBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
            updateGallery((currentIndex - 1 + imagesArray.length) % imagesArray.length);
        });
    }

    if (nextBtn) {
        nextBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
            updateGallery((currentIndex + 1) % imagesArray.length);
        });
    }

    if (thumbnailsContainer) {
        thumbnailsContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('attraction-thumbnail')) {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                const index = parseInt(e.target.dataset.index);
                if (!isNaN(index)) {
                    updateGallery(index);
                }
            }
        });
    }

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–∞–π–ø–æ–≤ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  // --- Rendering ---
  function renderAttractions() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (!attractionsContainer) {
      console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ (#attractions-container) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
      return;
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    attractionsContainer.innerHTML = '';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!ATTRACTIONS || ATTRACTIONS.length === 0) {
      // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ loadAttractions, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      console.warn('renderAttractions –≤—ã–∑–≤–∞–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ ATTRACTIONS –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.');
      return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const query = (searchInput?.value || '').toLowerCase().trim();
    // currentCategory –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ handleCategoryClick –∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ '–≤—Å–µ'

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const filtered = ATTRACTIONS.filter(attraction => {
      const matchesCategory = currentCategory === '–≤—Å–µ' || attraction.category === currentCategory;
      const matchesSearch = !query ||
        (attraction.title && attraction.title.toLowerCase().includes(query)) ||
        (attraction.description && attraction.description.toLowerCase().includes(query));

      return matchesCategory && matchesSearch;
    });

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    if (filtered.length === 0) {
      attractionsContainer.innerHTML = `
        <div class="empty">
          <div class="text-6xl">üîç</div>
          <h3>–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.</p>
        </div>
      `;
      return;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤
    filtered.forEach(attraction => {
      const card = createAttractionCard(attraction);
      attractionsContainer.appendChild(card);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ –ø–æ ID
      const attractionData = ATTRACTIONS.find(a => a.id == attraction.id);

      if (attractionData) {
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–í –∫–æ—Ä–∑–∏–Ω—É" –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±, –µ—Å–ª–∏ –Ω–µ –≤ main.js)
  const cartBtn = document.getElementById('cart-btn'); // <-- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å
  if (cartBtn) {
  cartBtn.addEventListener('click', () => {
       window.location.href = '/cart.html'; // <-- –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     });
   }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        let imagesForThisCard = [];
        if (attractionData.images && Array.isArray(attractionData.images) && attractionData.images.length > 0) {
            imagesForThisCard = attractionData.images;
        } else if (attractionData.image) {
            imagesForThisCard = [{ url: attractionData.image, alt: attractionData.title || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' }];
        } else {
            imagesForThisCard = [{ url: '/assets/icons/placeholder1.webp', alt: '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' }];
        }
        setupGallery(card, imagesForThisCard);
      } else {
        console.error(`–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω —Å ID ${attraction.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö ATTRACTIONS –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥–∞–ª–µ—Ä–µ–∏.`);
      }
    });
  }

  // --- Cart Functions (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ state.js) ---
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
  function getCart() {
    const cart = localStorage.getItem('cart');
    return cart ? JSON.parse(cart) : [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á 'cart')
function getCart() {
  const cart = localStorage.getItem('cart'); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'cart'
  return cart ? JSON.parse(cart) : [];
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á 'cart')
function addToCart(product) {
  console.log("attractions.js: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É:", attractions.id, attractions.title); // <-- –ù–æ–≤—ã–π –ª–æ–≥
  const cart = getCart();
  const existingItem = cart.find(item => item.attractions.id === attractions.id);

  if (existingItem) {
    existingItem.qty += 1;
  } else {
    cart.push({ product, qty: 1 });
  }

  localStorage.setItem('cart', JSON.stringify(cart)); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'cart'
  updateCartCount(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á 'cart')
function updateQuantity(attractionsId, change) {
  const cart = getCart();
  const item = cart.find(item => item.attractions.id === attractionsId);

  if (item) {
    item.qty += change;
    if (item.qty <= 0) {
      const index = cart.indexOf(item);
      cart.splice(index, 1);
    }
    localStorage.setItem('cart', JSON.stringify(cart)); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'cart'
    updateCartCount();
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á 'cart')
function clearCart() {
  localStorage.removeItem('cart'); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'cart'
  updateCartCount();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
function updateCartCount() {
  const cart = getCart();
  const count = cart.reduce((sum, item) => sum + item.qty, 0);
  const cartCountEls = document.querySelectorAll('#cart-count, #cart-count-header'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ state.js/main.js

  cartCountEls.forEach(el => {
    if (el) {
      el.textContent = count;
      el.style.display = count > 0 ? 'flex' : 'none'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º display: flex; –∫–∞–∫ –≤ state.js
    }
  });
}

  // --- Utility Functions (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ utils.js) ---
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
  function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(price);
  }

  function getScrollbarWidth() {
    const outer = document.createElement('div');
    outer.style.visibility = 'hidden';
    outer.style.overflow = 'scroll';
    outer.style.msOverflowStyle = 'scrollbar';
    document.body.appendChild(outer);
    const inner = document.createElement('div');
    outer.appendChild(inner);
    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
    outer.parentNode.removeChild(outer);
    return scrollbarWidth;
  }

  // --- Modals (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–∑–∏–Ω–∞) ---
  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã
  function openCartModal() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const scrollY = window.scrollY || window.pageYOffset;
    document.body.setAttribute('data-scroll-position', scrollY);
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    document.body.classList.add('modal-open');
    document.body.style.setProperty('--scrollbar-width', getScrollbarWidth() + 'px');
    document.body.style.top = `-${scrollY}px`;
    if (cartItems) {
      const cart = getCart();
      if (cart.length === 0) {
        cartItems.innerHTML = '<div class="empty">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
      } else {
        cartItems.innerHTML = '';
        let total = 0;
        cart.forEach(item => {
          // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
          const imageUrl = item.product.image || 
                           (item.product.images && item.product.images[0] ? item.product.images[0].url : '/assets/icons/placeholder1.webp') ||
                           '/assets/icons/placeholder1.webp';
          const row = document.createElement('div');
          row.className = 'cart-item';
          row.innerHTML = `
            <img src="${imageUrl}" alt="" onerror="this.onerror=null; this.src='/assets/icons/placeholder1.webp';"/>
            <div class="cart-item-info">
              <div class="cart-item-title">${item.product.title}</div>
              <div class="cart-item-price">${formatPrice(item.product.price)}</div>
              <div class="cart-quantity">
                <button class="qty-minus" data-id="${item.product.id}">‚àí</button>
                <span>${item.qty}</span>
                <button class="qty-plus" data-id="${item.product.id}">+</button>
              </div>
            </div>
            <div class="cart-item-total">${formatPrice(item.product.price * item.qty)}</div>
          `;
          cartItems.appendChild(row);
          total += item.product.price * item.qty;
        });
        const totalRow = document.createElement('div');
        totalRow.className = 'total-row';
        totalRow.innerHTML = `<span>–ò—Ç–æ–≥–æ:</span><span>${formatPrice(total)}</span>`;
        cartItems.appendChild(totalRow);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.querySelectorAll('.qty-minus').forEach(btn => {
          btn.addEventListener('click', () => {
            const id = parseInt(btn.dataset.id);
            updateQuantity(id, -1);
            openCartModal();
          });
        });
        document.querySelectorAll('.qty-plus').forEach(btn => {
          btn.addEventListener('click', () => {
            const id = parseInt(btn.dataset.id);
            updateQuantity(id, 1);
            openCartModal();
          });
        });
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ jQuery –∏ maskedinput –¥–æ—Å—Ç—É–ø–Ω—ã, –∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof $ !== 'undefined' && $.fn.mask && phoneInput) {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª—é–±—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—Å–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      $(phoneInput).unmask();
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
      $(phoneInput).mask("+7 (999) 999-99-99", { placeholder: "+7 (___) ___-__-__" });
    } else {
      console.warn("jQuery, maskedinput –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç #phone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ú–∞—Å–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.");
      if (phoneInput) {
         phoneInput.removeEventListener('input', sanitizePhoneInput);
         phoneInput.addEventListener('input', sanitizePhoneInput);
      }
    }
    updateSendOrderButton();
    cartModal.setAttribute('aria-hidden', 'false');
    cartModal.setAttribute('tabindex', '-1');
    cartModal.classList.add('open');
    setTimeout(() => {
      const phoneInputToFocus = document.getElementById('phone');
      if (phoneInputToFocus && typeof phoneInputToFocus.focus === 'function') {
        phoneInputToFocus.focus();
      } else {
        const closeButton = cartModal.querySelector('.modal-close');
        if (closeButton && typeof closeButton.focus === 'function') {
          closeButton.focus();
        } else {
          cartModal.setAttribute('tabindex', '-1');
          cartModal.focus();
        }
      }
    }, 0);
    if (typeof $ !== 'undefined' && $.fn.mask && phoneInput) {
      $(phoneInput).unmask();
      $(phoneInput).mask("+7 (999) 999-99-99", { placeholder: "+7 (___) ___-__-__" });
    } else {
      console.warn("jQuery, maskedinput –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç #phone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ú–∞—Å–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.");
      if (phoneInput) {
         phoneInput.removeEventListener('input', sanitizePhoneInput);
         phoneInput.addEventListener('input', sanitizePhoneInput);
      }
    }
  }

  function sanitizePhoneInput(event) {
    event.target.value = event.target.value.replace(/[^0-9+]/g, '');
  }

  function updateSendOrderButton() {
    if (!sendOrderBtn) return;
    const cart = getCart();
    const consentCheckbox = document.getElementById('consent-toggle');
    const isConsentGiven = consentCheckbox ? consentCheckbox.checked : false;
    if (cart.length === 0) {
      sendOrderBtn.disabled = true;
      sendOrderBtn.title = '–ù–µ–ª—å–∑—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
    } else if (!isConsentGiven) {
      sendOrderBtn.disabled = true;
      sendOrderBtn.title = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
    } else {
      sendOrderBtn.disabled = false;
      sendOrderBtn.title = '';
    }
  }

  function closeModals() {
    const modal = document.querySelector('.modal.open');
    if (modal) modal.classList.remove('open');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const scrollY = document.body.getAttribute('data-scroll-position');
    document.body.classList.remove('modal-open');
    document.body.style.removeProperty('--scrollbar-width');
    document.body.style.removeProperty('top');
    if (scrollY) {
      window.scrollTo(0, parseInt(scrollY));
      document.body.removeAttribute('data-scroll-position');
    }
  }

  // --- Event Listeners ---
  function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(renderAttractions, 300); // Debounce
      });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (categoryButtons.length > 0) {
      categoryButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          categoryButtons.forEach(b => b.classList.remove('active'));
          e.target.classList.add('active');
          currentCategory = e.target.dataset.category || '–≤—Å–µ';
          renderAttractions();
        });
      });
    }

    // –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    if (cartBtn) {
        cartBtn.addEventListener('click', () => {
             const scrollY = window.scrollY || window.pageYOffset;
             document.body.setAttribute('data-scroll-position', scrollY);
             document.body.classList.add('modal-open');
             const scrollbarWidth = getScrollbarWidth();
             document.body.style.setProperty('--scrollbar-width', scrollbarWidth + 'px');
             document.body.style.top = `-${scrollY}px`;

             // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∫–æ—Ä–∑–∏–Ω—ã
             openCartModal();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    phoneInput?.addEventListener('input', () => {
      phoneInput.value = phoneInput.value.replace(/[^0-9+]/g, '');
    });
    const consentCheckbox = document.getElementById('consent-toggle');
    if (consentCheckbox) {
      consentCheckbox.addEventListener('change', updateSendOrderButton);
    }
    if (sendOrderBtn) {
      let isSending = false;
      sendOrderBtn.addEventListener('click', async () => {
        if (isSending) {
          console.log('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...');
          return;
        }
        const consentCheckbox = document.getElementById('consent-toggle');
        const isConsentGiven = consentCheckbox ? consentCheckbox.checked : false;
        if (!isConsentGiven) {
          alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
          return;
        }
        if (!phoneInput.value.trim()) {
          alert('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω');
          return;
        }
        if (getCart().length === 0) {
          alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
          return;
        }
        try {
          isSending = true;
          sendOrderBtn.disabled = true;
          sendOrderBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
          const response = await fetch('/api/order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              phone: phoneInput.value,
              comment: commentInput.value,
              cart: getCart()
            })
          });
          const result = await response.json();
         
          if (result.success) {
            clearCart();
            phoneInput.value = '';
            commentInput.value = '';
            successMessage.style.display = 'block';
            openCartModal();
            setTimeout(() => {
              successMessage.style.display = 'none';
              sendOrderBtn.disabled = false;
              sendOrderBtn.textContent = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑';
              isSending = false;
            }, 3000);
          } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
          if (error.message && error.message.includes('–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')) {
            clearCart();
            phoneInput.value = '';
            commentInput.value = '';
            successMessage.style.display = 'block';
            openCartModal();
            setTimeout(() => {
              successMessage.style.display = 'none';
              sendOrderBtn.disabled = false;
              sendOrderBtn.textContent = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑';
              isSending = false;
            }, 3000);
          } else {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.');
            sendOrderBtn.disabled = false;
            sendOrderBtn.textContent = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑';
            isSending = false;
          }
        }
      });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
    document.querySelectorAll('[data-close]').forEach(btn => {
      btn.addEventListener('click', closeModals);
    });

    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModals();
            }
        });
    });
  }


})();