// server.js
require('dotenv').config();

// –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('=== Environment Variables ===');
console.log('DATABASE_URL:', process.env.DATABASE_URL);
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_PORT:', process.env.DB_PORT);
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_PASSWORD:', process.env.DB_PASSWORD ? '[–°–ö–†–´–¢]' : 'undefined');
console.log('DB_NAME:', process.env.DB_NAME);
console.log('============================');

const express = require('express');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const bcrypt = require('bcryptjs'); // ‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
const multer = require('multer');


const app = express();
const PORT = process.env.PORT || 3000;

const { Pool } = require('pg');

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ===
const pool = new Pool({
  connectionString: process.env.DATABASE_URL && process.env.DATABASE_URL !== 'undefined' 
    ? process.env.DATABASE_URL 
    : `postgres://${process.env.DB_USER}:${encodeURIComponent(process.env.DB_PASSWORD)}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`,
  // –û—Ç–∫–ª—é—á–∞–µ–º SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  ssl: process.env.DB_HOST === 'localhost' || process.env.DB_HOST === '127.0.0.1' ? false : {
    rejectUnauthorized: false
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
pool.on('error', (err) => {
  console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—É–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL:', err);
  process.exit(-1);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
  } else {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', res.rows[0].now);
  }
});

async function getProducts() {
  try {
    const res = await pool.query('SELECT * FROM products');
    return res.rows;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
    return [];
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ production)
(async () => {
  try {
    const products = await getProducts();
    console.log('–¢–æ–≤–∞—Ä—ã –∏–∑ –ë–î:', products.length);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–∏–º–µ—Ä–µ:', err);
  }
})();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { pool, getProducts };

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
process.env.TZ = 'Europe/Moscow';
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cb(null, path.join(__dirname, 'public', 'uploads'));
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

// Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û –≤–∞—à–∏—Ö –¥—Ä—É–≥–∏—Ö app.use –∏ app.get/app.post
app.post('/api/upload', upload.single('image'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏–∫—É
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ—Ç–¥–∞–≤–∞—Ç—å /uploads –∏–∑ /public/uploads
  const fileUrl = `/uploads/${req.file.filename}`;
  res.json({ url: fileUrl });
});

// === API: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ===
app.get('/api/products', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const isAdmin = req.query.admin === 'true';
    
    let query = `
      SELECT 
        id, title, description, price, tag, available, category, brand, compatibility,
        images_json as images
      FROM products 
    `;
    
    // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    // –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    if (!isAdmin) {
      query += ' WHERE available = true ';
    }
    
    query += ' ORDER BY id';
    
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' });
  }
});
// === API: –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ===
app.post('/api/order', async (req, res) => {
  console.log('=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–ê ===');
  console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);

  const { phone, comment, cart } = req.body;

  // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!phone || !cart || cart.length === 0) {
    console.log('–û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
    return res.status(400).json({ success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  const requestHash = JSON.stringify({ phone, comment, cart });
  if (req.app.locals.lastOrderRequest === requestHash) {
    console.log('–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
    return res.status(200).json({ 
      success: true, 
      message: '–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      orderId: req.app.locals.lastOrderId || null
    });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  req.app.locals.lastOrderRequest = requestHash;
  
  // –û—á–∏—â–∞–µ–º —Ö—ç—à —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (req.app.locals.lastOrderRequest === requestHash) {
      req.app.locals.lastOrderRequest = null;
      req.app.locals.lastOrderId = null;
    }
  }, 30000);

  let orderId = null;
  let orderSaved = false;
  let telegramSent = false;

  try {
    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const total = cart.reduce((sum, item) => sum + (item.product?.price || 0) * item.qty, 0);
    console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞:', total);

    // 4. –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏ Telegram
    const moscowTimeObj = new Date(new Date().toLocaleString("en-US", {timeZone: 'Europe/Moscow'}));
    const moscowTimeString = moscowTimeObj.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    console.log('–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ (–ú–æ—Å–∫–≤–∞):', moscowTimeString);

    // 5. –í—Å—Ç–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –≤ –ë–î
    if (pool) {
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î...');
      const orderResult = await pool.query(
        'INSERT INTO orders (phone, comment, total_amount, created_at) VALUES ($1, $2, $3, $4) RETURNING id',
        [phone, comment || '', total, moscowTimeObj]
      );
      orderId = orderResult.rows[0].id;
      orderSaved = true;
      req.app.locals.lastOrderId = orderId;
      console.log('–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID:', orderId);
    } else {
      console.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.');
    }

    // 6. –í—Å—Ç–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    if (pool && orderId) {
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞ –≤ –ë–î...');
      const itemInserts = cart.map(item => [
        orderId,
        item.product?.id,
        item.product?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
        item.qty,
        item.product?.price || 0
      ]);

      if (itemInserts.length > 0) {
        const queryText = 'INSERT INTO order_items (order_id, product_id, product_title, quantity, price_per_unit) VALUES ';
        const queryValues = [];
        const placeholders = itemInserts.map((_, index) => {
          const start = index * 5 + 1;
          return `($${start}, $${start+1}, $${start+2}, $${start+3}, $${start+4})`;
        }).join(', ');

        itemInserts.forEach(item => {
          queryValues.push(...item);
        });

        await pool.query(queryText + placeholders, queryValues);
        console.log('–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
      }
    }
    const cleanPhone = phone.replace(/[^0-9+]/g, '');

    // 7. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ BIZON!*
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${cleanPhone}\`
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üõí *–¢–æ–≤–∞—Ä—ã:*
${cart.map(item => `‚Ä¢ ${item.product?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'} √ó${item.qty} ‚Äî ${(item.product?.price || 0) * item.qty} ‚ÇΩ`).join('\n')}
üí∞ *–ò—Ç–æ–≥–æ:* ${total} ‚ÇΩ
üïê ${moscowTimeString}
`.trim();

    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:', message);

    // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (BOT_TOKEN && CHAT_ID) {
      try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...');
        await axios.post(
          `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
          {
            chat_id: CHAT_ID,
            text: message,
            parse_mode: 'Markdown',
            disable_web_page_preview: true
          }
        );
        telegramSent = true;
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      }
    } else {
      console.warn('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // 9. –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    console.log('=== –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù ===');
    res.json({ 
      success: true, 
      orderId: orderId,
      savedToDB: orderSaved,
      sentToTelegram: telegramSent
    });

  } catch (error) {
    console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
    // –û—á–∏—â–∞–µ–º —Ö—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
    req.app.locals.lastOrderRequest = null;
    req.app.locals.lastOrderId = null;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
});

// === API: –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ (–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞) ===
app.post('/api/contact', async (req, res) => {
  console.log('=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–ö–ò –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö ===');
  console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);

  const { name, phone } = req.body; // –û–∂–∏–¥–∞–µ–º name –∏ phone –∏–∑ —Ñ–æ—Ä–º—ã

  // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!phone) { // –ò–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    console.log('–û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    return res.status(400).json({ success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –∑–∞–∫–∞–∑–æ–º)
  const requestHash = JSON.stringify({ name, phone });
  if (req.app.locals.lastContactRequest === requestHash) {
    console.log('–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
    return res.status(200).json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'
    });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  req.app.locals.lastContactRequest = requestHash;
  
  // –û—á–∏—â–∞–µ–º —Ö—ç—à —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (req.app.locals.lastContactRequest === requestHash) {
      req.app.locals.lastContactRequest = null;
    }
  }, 30000);

  let dbSaved = false;
  let telegramSent = false;

  try {
    // 3. –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    const moscowTimeObj = new Date(new Date().toLocaleString("en-US", {timeZone: 'Europe/Moscow'}));
    const moscowTimeString = moscowTimeObj.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    console.log('–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏ (–ú–æ—Å–∫–≤–∞):', moscowTimeString);

    // 4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—è–≤–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä `callbacks`, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ:
    /*
    if (pool) {
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î...');
      const callbackResult = await pool.query(
        'INSERT INTO callbacks (name, phone, created_at) VALUES ($1, $2, $3) RETURNING id',
        [name || '', phone, moscowTimeObj] // name –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
      );
      dbSaved = true;
      console.log('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID:', callbackResult.rows[0].id);
    } else {
      console.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞—è–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.');
    }
    */
const cleanPhone = phone.replace(/[^0-9+]/g, '');
    // 5. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üìû *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ BIZON!*
üë§ *–ò–º—è:* ${name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${cleanPhone}\`
üïê ${moscowTimeString}
`.trim();

    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:', message);

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (BOT_TOKEN && CHAT_ID) {
      try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...');
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL (—É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª)
        await axios.post(
          `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
          {
            chat_id: CHAT_ID,
            text: message,
            parse_mode: 'Markdown',
            disable_web_page_preview: true
          }
        );
        telegramSent = true;
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      }
    } else {
      console.warn('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    console.log('=== –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–ê ===');
    res.json({ 
      success: true,
      savedToDB: dbSaved,
      sentToTelegram: telegramSent
    });

  } catch (error) {
    console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    // –û—á–∏—â–∞–µ–º —Ö—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
    req.app.locals.lastContactRequest = null;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
});

// === API: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID ===
app.get('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query(`
        SELECT 
          id, title, description, price, tag, available, category, brand, compatibility,
          images_json as images
        FROM products 
        WHERE id = $1
      `, [id]);

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä ===
app.post('/api/products', async (req, res) => {
  try {
    // req.body –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'id'
    const { id, title, description, price, tag, available, category, brand, compatibility, images } = req.body;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const images_json = images ? JSON.stringify(images) : null;

    // –ü–†–û–ë–õ–ï–ú–ê –ß–ê–°–¢–û –ó–î–ï–°–¨: –µ—Å–ª–∏ 'id' –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ req.body –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ INSERT,
    // –∞ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º id, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞.
    // –õ—É—á—à–µ –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å 'id' –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.

    if (pool) {
      // –¢–ï–ö–£–©–ò–ô –ö–û–î (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π):
      // const result = await pool.query(`
      //   INSERT INTO products (id, title, description, ...) -- –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ id
      //   VALUES ($1, $2, $3, ...)                           -- –ü–µ—Ä–µ–¥–∞—á–∞ id –∏–∑ req.body
      //   RETURNING ...
      // `, [id, title, description, ...]);                   -- id –≤ —Å–ø–∏—Å–∫–µ

      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:
      // –ù–µ –≤–∫–ª—é—á–∞–µ–º 'id' –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è INSERT –∏ –≤ VALUES, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º,
      // —á—Ç–æ–±—ã PostgreSQL —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –µ–≥–æ.
      const result = await pool.query(`
        INSERT INTO products (title, description, price, tag, available, category, brand, compatibility, images_json)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING id, title, description, price, tag, available, category, brand, compatibility, images_json as images
      `, [title, description, price, tag, available, category, brand, compatibility, images_json]);

      res.status(201).json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    // ... –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
  }
});

// === API: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ===
app.put('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, price, tag, available, category, brand, compatibility, images } = req.body;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const images_json = images ? JSON.stringify(images) : null;

    if (pool) {
      const result = await pool.query(`
        UPDATE products 
        SET title = $1, description = $2, price = $3, tag = $4, available = $5, category = $6, brand = $7, compatibility = $8, images_json = $9
        WHERE id = $10
        RETURNING id, title, description, price, tag, available, category, brand, compatibility, images_json as images
      `, [title, description, price, tag, available, category, brand, compatibility, images_json, id]);

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ===
app.delete('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query('DELETE FROM products WHERE id = $1 RETURNING id', [id]);
      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.status(204).send(); // 204 No Content - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
app.get('/api/categories', async (req, res) => {
  try {
    if (pool) {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ categories —Å –ø–æ–ª—è–º–∏ id –∏ name
      const result = await pool.query('SELECT id, name FROM categories ORDER BY name');
      res.json(result.rows);
    } else {
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.warn('–¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
      res.json([]); // –ò–ª–∏ res.json([{id: 1, name: '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'}, ...]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// === API: –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ===
app.post('/api/categories', async (req, res) => {
    try {
        const { name } = req.body;
        if (!name) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }

        if (pool) {
            const result = await pool.query(
                'INSERT INTO categories (name) VALUES ($1) RETURNING id, name',
                [name]
            );
            res.status(201).json(result.rows[0]);
        } else {
            res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
    }
});

// === API: –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // 1. –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!username || !password) {
      return res.status(400).json({ success: false, message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if (!pool) {
      console.error('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }

    // 3. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const result = await pool.query(
      'SELECT id, username, password_hash FROM admin_users WHERE username = $1',
      [username]
    );

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (result.rows.length === 0) {
      // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const user = result.rows[0];

    // 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    
    if (!isPasswordValid) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // 6. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è JWT —Ç–æ–∫–µ–Ω
    res.json({ success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
});

// === API: –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ===
app.delete('/api/categories/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query('DELETE FROM categories WHERE id = $1 RETURNING id', [id]);
      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
      res.status(204).send(); // 204 No Content - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
  }
});

// === API: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã ===
app.get('/api/orders', async (req, res) => {
  try {
    if (pool) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      const ordersResult = await pool.query(`
        SELECT 
          id, 
          phone, 
          comment, 
          total_amount, 
          created_at, 
          COALESCE(status, '–Ω–æ–≤—ã–π') as status
        FROM orders 
        ORDER BY created_at DESC
      `);

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏
      const ordersWithItems = await Promise.all(ordersResult.rows.map(async (order) => {
        const itemsResult = await pool.query(`
          SELECT 
            product_id,
            product_title, 
            quantity,
            price_per_unit, 
            (quantity * price_per_unit) as total_price 
          FROM order_items 
          WHERE order_id = $1
          ORDER BY id
        `, [order.id]);

        return {
          ...order,
          items: itemsResult.rows || [] // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å price_per_unit
        };
      }));

      res.json(ordersWithItems);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã: ' + err.message });
  }
});

// === API: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ===
app.put('/api/orders/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const validStatuses = ['–Ω–æ–≤—ã–π', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–æ—Ç–º–µ–Ω–µ–Ω'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
    }

    if (pool) {
      const result = await pool.query(
        'UPDATE orders SET status = $1 WHERE id = $2 RETURNING id',
        [status, id]
      );

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞' });
  }
});

// === API: –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ===
app.delete('/api/orders/:id', async (req, res) => {
  try {
    const { id } = req.params;

    if (pool) {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      await pool.query('DELETE FROM order_items WHERE order_id = $1', [id]);
      
      // –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
      const result = await pool.query('DELETE FROM orders WHERE id = $1 RETURNING id', [id]);

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      res.json({ success: true, message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑: ' + err.message });
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});