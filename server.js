// server.js
require('dotenv').config();
const express = require('express');
const path = require('path');
const fs = require('fs');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

const bcrypt = require('bcryptjs');

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));




// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (—Ç–æ–ª—å–∫–æ –Ω–∞ Render) ===
let pool;
if (process.env.DATABASE_URL) {
  const { Pool } = require('pg');
  pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });
}

// === API: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ===
app.get('/api/products', async (req, res) => {
  try {
   
    if (pool) {
      // –ù–∞ Render ‚Äî –∏–∑ –ë–î
      
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ products –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏: id, title, description, price, tag, available, category, brand, compatibility, images_json
      const result = await pool.query(`
        SELECT 
          id, title, description, price, tag, available, category, brand, compatibility,
          images_json as images -- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images_json –≤ images –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        FROM products 
        WHERE available = true 
        ORDER BY id
      `);
      
      res.json(result.rows); // –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –ø–æ–ª–µ 'images'
    } else {
      console.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.');
      res.json([]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' });
  }
});

// === API: –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ===
app.post('/api/order', async (req, res) => {
  const { phone, comment, cart } = req.body;

  // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!phone || !cart || cart.length === 0) {
    return res.status(400).json({ success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
  }

  // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
  const total = cart.reduce((sum, item) => sum + (item.product?.price || 0) * item.qty, 0);

  // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
  const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ BIZON!*
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone}\`
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üõí *–¢–æ–≤–∞—Ä—ã:*
${cart.map(item => `‚Ä¢ ${item.product?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'} √ó${item.qty} ‚Äî ${(item.product?.price || 0) * item.qty} ‚ÇΩ`).join('\n')}
üí∞ *–ò—Ç–æ–≥–æ:* ${total} ‚ÇΩ
üïê ${new Date().toLocaleString('ru-RU')}
  `.trim();

  // 4. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  // –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —á–∞—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
  try {
    let orderId = null;

    // 5. –í—Å—Ç–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –≤ –ë–î
    if (pool) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
     
        const orderResult = await pool.query(
          'INSERT INTO orders (phone, comment, total_amount) VALUES ($1, $2, $3) RETURNING id',
          [phone, comment || '', total]
        );
        orderId = orderResult.rows[0].id;
       
    } else {
        console.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.');
    }

    // 6. –í—Å—Ç–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    if (pool && orderId) {
       
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch insert
        const itemInserts = cart.map(item => [
            orderId,
            item.product?.id,
            item.product?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
            item.qty,
            item.product?.price || 0
        ]);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º pg-format –∏–ª–∏ —Å—Ç—Ä–æ–∏–º SQL –≤—Ä—É—á–Ω—É—é –¥–ª—è batch insert
        // –ü—Ä–∏–º–µ—Ä —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º SQL (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤):
        if (itemInserts.length > 0) {
            const queryText = 'INSERT INTO order_items (order_id, product_id, product_title, quantity, price_per_unit) VALUES ';
            const queryValues = [];
            const placeholders = itemInserts.map((_, index) => {
                const start = index * 5 + 1;
                return `($${start}, $${start+1}, $${start+2}, $${start+3}, $${start+4})`;
            }).join(', ');

            itemInserts.forEach(item => {
                queryValues.push(...item);
            });

            await pool.query(queryText + placeholders, queryValues);
            
        }
    }

    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL (—É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª)
    await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      }
    );


    // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    res.json({ success: true });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    // –í–∞–∂–Ω–æ: –≤ production —Å—Ä–µ–¥–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥–µ—Ç–∞–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  }
});
// server.js
// ... (–≤—Å—ë, —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞)

// === API: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID ===
app.get('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query(`
        SELECT 
          id, title, description, price, tag, available, category, brand, compatibility,
          images_json as images
        FROM products 
        WHERE id = $1
      `, [id]);

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä ===
app.post('/api/products', async (req, res) => {
  try {
    const { title, description, price, tag, available, category, brand, compatibility, images } = req.body;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const images_json = images ? JSON.stringify(images) : null;

    if (pool) {
      const result = await pool.query(`
        INSERT INTO products (title, description, price, tag, available, category, brand, compatibility, images_json)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING id, title, description, price, tag, available, category, brand, compatibility, images_json as images
      `, [title, description, price, tag, available, category, brand, compatibility, images_json]);

      res.status(201).json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ===
app.put('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, price, tag, available, category, brand, compatibility, images } = req.body;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º images –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const images_json = images ? JSON.stringify(images) : null;

    if (pool) {
      const result = await pool.query(`
        UPDATE products 
        SET title = $1, description = $2, price = $3, tag = $4, available = $5, category = $6, brand = $7, compatibility = $8, images_json = $9
        WHERE id = $10
        RETURNING id, title, description, price, tag, available, category, brand, compatibility, images_json as images
      `, [title, description, price, tag, available, category, brand, compatibility, images_json, id]);

      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.json(result.rows[0]);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ===
app.delete('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query('DELETE FROM products WHERE id = $1 RETURNING id', [id]);
      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      res.status(204).send(); // 204 No Content - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä' });
  }
});

// === API: –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
app.get('/api/categories', async (req, res) => {
  try {
    if (pool) {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ categories —Å –ø–æ–ª—è–º–∏ id –∏ name
      const result = await pool.query('SELECT id, name FROM categories ORDER BY name');
      res.json(result.rows);
    } else {
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.warn('–¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
      res.json([]); // –ò–ª–∏ res.json([{id: 1, name: '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'}, ...]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// === API: –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ===
app.post('/api/categories', async (req, res) => {
    try {
        const { name } = req.body;
        if (!name) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }

        if (pool) {
            const result = await pool.query(
                'INSERT INTO categories (name) VALUES ($1) RETURNING id, name',
                [name]
            );
            res.status(201).json(result.rows[0]);
        } else {
            res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
    }
});

// === API: –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // 1. –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!username || !password) {
      return res.status(400).json({ success: false, message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if (!pool) {
      console.error('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
      return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }

    // 3. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const result = await pool.query(
      'SELECT id, username, password_hash FROM admin_users WHERE username = $1',
      [username]
    );

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (result.rows.length === 0) {
      // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const user = result.rows[0];

    // 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    
    if (!isPasswordValid) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // 6. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è JWT —Ç–æ–∫–µ–Ω
    res.json({ success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
});

// === API: –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ===
app.delete('/api/categories/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (pool) {
      const result = await pool.query('DELETE FROM categories WHERE id = $1 RETURNING id', [id]);
      if (result.rows.length === 0) {
        return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
      res.status(204).send(); // 204 No Content - —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' });
  }
});

// === API: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã ===
app.get('/api/orders', async (req, res) => {
  try {
    if (pool) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NULL –∑–Ω–∞—á–µ–Ω–∏–π
      const result = await pool.query(`
        SELECT 
          o.id, 
          o.phone, 
          o.comment, 
          o.total_amount, 
          o.created_at, 
          o.status,
          COALESCE((
            SELECT json_agg(
              json_build_object(
                'product', json_build_object(
                  'id', oi.product_id, 
                  'title', oi.product_title, 
                  'price', oi.price_per_unit
                ), 
                'qty', oi.quantity
              )
            )
            FROM order_items oi 
            WHERE oi.order_id = o.id
          ), '[]') as cart
        FROM orders o
        ORDER BY o.created_at DESC
      `);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å NULL –∑–Ω–∞—á–µ–Ω–∏—è
      const orders = result.rows.map(order => ({
        ...order,
        phone: order.phone || '',
        comment: order.comment || '',
        status: order.status || '–Ω–æ–≤—ã–π',
        cart: order.cart || []
      }));
      
      res.json(orders);
    } else {
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
    console.error('Stack trace:', err.stack);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã: ' + err.message });
  }
});

// ... (–≤—Å—ë, —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤–Ω–∏–∑—É —Ñ–∞–π–ª–∞)


app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});