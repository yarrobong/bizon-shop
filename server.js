// server.js
require('dotenv').config();
const express = require('express');
const path = require('path');
const fs = require('fs');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));



// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (—Ç–æ–ª—å–∫–æ –Ω–∞ Render) ===
let pool;
if (process.env.DATABASE_URL) {
  const { Pool } = require('pg');
  pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });
}

// === API: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ===
app.get('/api/products', async (req, res) => {
  try {
    console.log('–ó–∞–ø—Ä–æ—Å /api/products. process.env.DATABASE_URL –∑–∞–¥–∞–Ω–∞?', !!process.env.DATABASE_URL);
    console.log('Pool —Å–æ–∑–¥–∞–Ω?', !!pool);
    if (pool) {
      // –ù–∞ Render ‚Äî –∏–∑ –ë–î
      console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –ë–î...');
      const result = await pool.query('SELECT * FROM products WHERE available = true ORDER BY id');
      console.log('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:', result.rows.length);
      res.json(result.rows);
    } else {
      // <-- –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è else-–≤–µ—Ç–∫–∞
      console.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.');
      res.json([]); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: res.status(503).json({ error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î' });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã' });
  }
});

// === API: –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ===
app.post('/api/order', async (req, res) => {
  const { phone, comment, cart } = req.body;

  if (!phone || !cart || cart.length === 0) {
    return res.status(400).json({ success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
  }

  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

  const total = cart.reduce((sum, item) => sum + item.product.price * item.qty, 0);
  const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ BIZON!*
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone}\`
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üõí *–¢–æ–≤–∞—Ä—ã:*
${cart.map(item => `‚Ä¢ ${item.product.title} √ó${item.qty} ‚Äî ${item.product.price * item.qty} ‚ÇΩ`).join('\n')}
üí∞ *–ò—Ç–æ–≥–æ:* ${total} ‚ÇΩ
üïê ${new Date().toLocaleString('ru-RU')}
  `.trim();

  try {
    await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      }
    );
    res.json({ success: true });
  } catch (error) {
    console.error('Telegram error:', error.response?.data || error.message);
    res.status(500).json({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram' });
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});